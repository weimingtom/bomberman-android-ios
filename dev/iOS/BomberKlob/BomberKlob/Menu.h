#import <UIKit/UIKit.h>

#define SENSIBILITY 5


/** The `Menu` class aims to create a horizontal or vertical menu generic. 
 
 The menu generated by this class is a particular menu, the items of this menu are images and to choose an item, you have just to scroll the pictures (the middle image will be the selected image)
 */
@interface Menu : UIView {
    
    BOOL horizontal;
    NSInteger imageWidth;
    NSInteger imageHeight;
    NSInteger imageMargin;
    NSInteger reductionPercentage;
    
    NSArray *items;
    NSArray *images;
    
    NSInteger selectedImageIndex;
    NSInteger nbImageDisplay;
    NSMutableArray *imagesDisplayed;
    NSMutableArray *imagesPosition;
    
    CGPoint startLocation;
}

/** The default width of images. */
@property (nonatomic, assign) NSInteger imageWidth;

/** The default height of images. */
@property (nonatomic, assign) NSInteger imageHeight;

/** The default margin between images. */
@property (nonatomic, assign) NSInteger imageMargin;

/** The array of items that match to images of menu. */
@property (nonatomic, retain) NSArray *items;

/** The pictures that will be displayed to make menu. */
@property (nonatomic, retain) NSArray *images;

/** The images position and dimension in menu. */
@property (nonatomic, retain) NSMutableArray *imagesPosition;

/** Index of selected image (it's the same as selected item). */
@property (nonatomic, assign) NSInteger selectedImageIndex;


///--------------------------
/// @name Initializing a Menu
///--------------------------

/** Return a new menu, initialized with frame, orientation, image width, image height, image margin, reduction percentage, items and images.
 
 @param frame The characteristics of position and dimension of the new menu.
 @param isHorizontal The menu orientation (horizontal or vertical), `YES` for a horizontal menu and `NO` for a vertical menu.
 @param imageWidthValue The default width of images.
 @param imageHeightValue The default height of images.
 @param imageMarginValue The default margin between images.
 @param reductionPercentageValue The reduction percentage for images and margins, it is used to reduce on images and margins of menu for better display.
 @param itemsValue The array of items that match to images of menu.
 @param imagesValue The pictures that will be displayed to make menu.
 @return A new menu, initialized with frame, orientation, image width, image height, image margin, reduction percentage, items and images.
 @see initButNotBuild:horizontal:imageWidth:imageHeight:imageMargin:reductionPercentage:items:images:
 */
- (id)initWithFrame:(CGRect)frame horizontal:(BOOL)isHorizontal imageWidth:(NSInteger)imageWidthValue imageHeight:(NSInteger)imageHeightValue imageMargin:(NSInteger)imageMarginValue reductionPercentage:(NSInteger)reductionPercentageValue items:(NSArray *)itemsValue images:(NSArray *)imagesValue;

/** A new menu, initialized with frame, orientation, image width, image height, image margin, reduction percentage, items and images. It doesn't build user interface.
 
 @param frame The characteristics of position and dimension of the new menu.
 @param isHorizontal The menu orientation (horizontal or vertical), `YES` for a horizontal menu and `NO` for a vertical menu.
 @param imageWidthValue The default width of images.
 @param imageHeightValue The default height of images.
 @param imageMarginValue The default margin between images.
 @param reductionPercentageValue The reduction percentage for images and margins, it is used to reduce on images and margins of menu for better display.
 @param itemsValue The array of items that match to images of menu.
 @param imagesValue The pictures that will be displayed to make menu.
 @return A new menu, initialized with frame, orientation, image width, image height, image margin, reduction percentage, items and images. It doesn't build user interface.
 @see initWithFrame:horizontal:imageWidth:imageHeight:imageMargin:reductionPercentage:items:images:
 */
- (id)initButNotBuild:(CGRect)frame horizontal:(BOOL)isHorizontal imageWidth:(NSInteger)imageWidthValue imageHeight:(NSInteger)imageHeightValue imageMargin:(NSInteger)imageMarginValue reductionPercentage:(NSInteger)reductionPercentageValue items:(NSArray *)itemsValue images:(NSArray *)imagesValue;


///-----------------------------
/// @name Preparing and Building
///-----------------------------

/** Builds the user interface.
 
 Add and move the pictures to the right place.
 */
- (void)buildUserInterface;

/** Sorts the array of images characteristics (position and dimension) in order of images position. */
- (void)sortImagesPosition;

/** Computes the number of pictures that the menu can contain. */
- (void)computeNumberImageDisplay;

/** Computes the dimensions and positions for each images of menu. */
- (void)computeImagesSquare;


///-------------------------------------------
/// @name Navigating into the Arrays of Images
///-------------------------------------------

/** Returns the previous image index of `currentImage` (of all pictures that could be display).
 
 @param currentImage Current image.
 @return The previous image index of `currentImage` (of all pictures that could be display).
 @see nextImage:
 @see previousImageDisplay:
 @see nextImageDisplay:
 */
- (NSInteger)previousImage:(NSInteger)currentImage;

/** Returns the next image index of `currentImage` (of all pictures that could be display).
 
 @param currentImage Current image.
 @return The next image index of `currentImage` (of all pictures that could be display).
 @see previousImage:
 @see previousImageDisplay:
 @see nextImageDisplay:
 */
- (NSInteger)nextImage:(NSInteger)currentImage;

/** Returns the previous image index of `currentImage` (just in pictures that are displayed).
 
 @param currentImage Current image.
 @return The previous image index of `currentImage` (just in pictures that are displayed).
 @see previousImage:
 @see nextImage:
 @see nextImageDisplay:
 */
- (NSInteger)previousImageDisplay:(NSInteger)currentImage;

/** Returns the next image index of `currentImage` (just in pictures that are displayed).
 
 @param currentImage Current image.
 @return The next image index of `currentImage` (just in pictures that are displayed).
 @see previousImage:
 @see nextImage:
 @see previousImageDisplay:
 */
- (NSInteger)nextImageDisplay:(NSInteger)currentImage;


///---------------------
/// @name Making Changes
///---------------------

/** Moves images on them good position.
 
 This method is used when the user changes the selected item.
 @see moveToNextImage
 @see moveToPreviousImage
 */
- (void)moveImages;

/** Changes the image position according to the movement.
 
 @param movement The finger movement, less than 0 if the movement goes from left to right (horizontal menu) or bottom to top (vertical menu) and more than 0 otherwise.
 @see computeImagesSquare
 */
- (void)changeImage:(NSInteger)movement;

/** Selects the next item and makes the required changes for each items (position and dimension). 
 
 @see moveImages
 @see moveToPreviousImage
 */
- (void)moveToNextImage;

/** Selects the previous item and makes the required changes for each items (position and dimension). 
 
 @see moveImages
 @see moveToNextImage
 */
- (void)moveToPreviousImage;

/** Replaces the different pictures, for they display in the good order.
 
 @param movement The finger movement, less than 0 if the movement goes from left to right (horizontal menu) or bottom to top (vertical menu) and more than 0 otherwise.
 */
- (void)replaceImages:(NSInteger)movement;

@end
